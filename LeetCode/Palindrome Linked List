/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(!head||!head->next) return true;
        ListNode *fast=head;
        ListNode *slow=head;
        while(fast && fast->next){
            slow=slow->next;
            fast=fast->next->next;
        } 
        ListNode *prev=nullptr,*current=slow;
        while(current){
         ListNode *newNode=current->next;
         current->next=prev;
         prev=current;
         current=newNode;
        }

        ListNode *firsthalf=head, *secondhalf=prev;
        while(secondhalf){
            if(firsthalf->val!=secondhalf->val) return false;
           firsthalf= firsthalf->next;
            secondhalf=secondhalf->next;
        }
      return true;
    }
};
