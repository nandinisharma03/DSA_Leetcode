class Solution {
private:
      void merge(vector<int>& nums, int s, int e) {
        int mid = (s + e) / 2;
        int len1 = mid - s + 1;
        int len2 = e - mid;

        int* first = new int[len1];
        int* second = new int[len2];

        // Copy values to subarrays
        int mainArrayIndex = s;
        for (int i = 0; i < len1; i++) {
            first[i] = nums[mainArrayIndex++];
        }
        mainArrayIndex = mid + 1;
        for (int i = 0; i < len2; i++) {
            second[i] = nums[mainArrayIndex++];
        }

        // Merge two sorted arrays
        int index1 = 0;
        int index2 = 0;
        mainArrayIndex = s;
        while (index1 < len1 && index2 < len2) {
            if (first[index1] < second[index2]) {
                nums[mainArrayIndex++] = first[index1++];
            } else {
                nums[mainArrayIndex++] = second[index2++];
            }
        }
        while (index1 < len1) {
            nums[mainArrayIndex++] = first[index1++];
        }
        while (index2 < len2) {
            nums[mainArrayIndex++] = second[index2++];
        }

        // Free dynamically allocated memory
        delete[] first;
        delete[] second;
    }

    void solve(vector<int>& nums, int s, int e) {
        // Base case
        if (s >= e) {
            return;
        }

        int mid = (s + e) / 2;

        // Sort the left part
        solve(nums, s, mid);

        // Sort the right part
        solve(nums, mid + 1, e);

        // Merge the two sorted parts
        merge(nums, s, e);
    }

public:
    vector<int> sortArray(vector<int>& nums) {
        solve(nums, 0, nums.size() - 1);
        return nums;
    }
};
